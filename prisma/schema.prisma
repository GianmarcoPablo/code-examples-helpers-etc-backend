// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobType {
  fulltime
  parttime
  freelancer
  internship
}

enum WorkMode {
  onsite
  remote
  hybrid
}

enum Status {
  active
  closed
  paused
}

enum SubscriptionPeriod {
  monthly
  yearly
}

enum ApplyJobStatus {
  pending
  resolved
  dismissed
}

enum ReportStatus {
  pending
  resolved
  dismissed
}

enum TypePublishJob {
  user
  company
}

enum Roles {
  user
  premiun
  admin
  mod
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  password               String
  email                  String    @unique
  roles                  Roles[]   @default([user])
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  Job                    Job[]
  Company                Company[]
}

model Company {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  logoUrl     String?
  bannerUrl   String?
  phone       String?
  address     String?
  industry    String
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  socialLinks String[]
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  Job         Job[]
}

model Job {
  id                    String         @id @default(uuid())
  title                 String
  description           String
  experienceLevel       String
  jobType               JobType
  workMode              WorkMode
  publishType           TypePublishJob
  ApplyJobLinks         String[]
  requirements          String[]
  benefits              String[]
  languagesRequired     String[]
  status                Status         @default(active)
  vacancies             Int            @default(1)
  ApplyJobDeadline      DateTime?
  salary                Float?
  location              String?
  workHours             String?
  additionalInformation String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  userId String? // Relación con usuario, si aplica
  User   User?   @relation(fields: [userId], references: [id])

  companyId  String? // Relación con compañía, si aplica
  Company    Company? @relation(fields: [companyId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  Job  Job[]
}
